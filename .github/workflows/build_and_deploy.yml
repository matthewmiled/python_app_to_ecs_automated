permissions:
  id-token: write
  contents: read

name: Build and Deploy

on:
  pull_request:
    types:
      - closed
env:
  ECR_REPOSITORY: mmiles-ecr
  ECS_CLUSTER: mmiles-cluster
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: mmiles-container

jobs:

  if-merged:
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3


    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
       
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task schedule
      run: |
        aws events put-rule --schedule-expression "cron(*/2 * * * ? *)" --name mmiles-schedule
        #aws events put-targets --rule "mmiles-schedule" --targets file://scheduledtask.json
        aws events remove-targets --rule "mmiles-schedule" --ids ci-cd-test


        

       

